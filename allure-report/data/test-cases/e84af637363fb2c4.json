{
  "uid" : "e84af637363fb2c4",
  "name" : "test_add_group[None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7]",
  "fullName" : "test.test_add_group.test_add_group[None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7]",
  "historyId" : "c6e82c02c98d609d12d2a4c321188bdf",
  "time" : {
    "start" : 1510387113288,
    "stop" : 1510387116185,
    "duration" : 2897
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "failed",
  "statusDetails" : {
    "message" : "AssertionError: assert [97:name^F7GO...6H* G]#f, ...] == [97:name^F7GO`...6H* G]#f, ...]\n  Left contains more items, first extra item: None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7\n  Use -v to get the full diff",
    "trace" : "app = <fixture.application.Application object at 0x03F42150>\ndb = <fixture.db.DbFixture object at 0x03F47430>\njson_groups = None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7\ncheck_ui = False\n\n    def test_add_group(app, db, json_groups, check_ui):\n        group = json_groups\n        old_groups = db.get_group_list()\n        app.group.create(group)\n        new_groups = db.get_group_list()\n        old_groups.append(group)\n>       assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE       AssertionError: assert [97:name^F7GO...6H* G]#f, ...] == [97:name^F7GO`...6H* G]#f, ...]\nE         Left contains more items, first extra item: None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7\nE         Use -v to get the full diff\n\ntest\\test_add_group.py:10: AssertionError",
    "flaky" : false
  },
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "VAIO"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "thread",
    "value" : "15940-MainThread"
  }, {
    "name" : "suite",
    "value" : "test.test_add_group"
  }, {
    "name" : "testClass",
    "value" : "test.test_add_group"
  }, {
    "name" : "testMethod",
    "value" : "test_add_group[None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7]"
  }, {
    "name" : "package",
    "value" : "test.test_add_group"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "statusMessage" : {
    "present" : true
  },
  "statusDetailsSafe" : {
    "message" : "AssertionError: assert [97:name^F7GO...6H* G]#f, ...] == [97:name^F7GO`...6H* G]#f, ...]\n  Left contains more items, first extra item: None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7\n  Use -v to get the full diff",
    "trace" : "app = <fixture.application.Application object at 0x03F42150>\ndb = <fixture.db.DbFixture object at 0x03F47430>\njson_groups = None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7\ncheck_ui = False\n\n    def test_add_group(app, db, json_groups, check_ui):\n        group = json_groups\n        old_groups = db.get_group_list()\n        app.group.create(group)\n        new_groups = db.get_group_list()\n        old_groups.append(group)\n>       assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE       AssertionError: assert [97:name^F7GO...6H* G]#f, ...] == [97:name^F7GO`...6H* G]#f, ...]\nE         Left contains more items, first extra item: None:nameac[:headerBx:r3Q K+ 20'  O:footerw<_Y7IT.P41# OC0y7\nE         Use -v to get the full diff\n\ntest\\test_add_group.py:10: AssertionError",
    "flaky" : false
  },
  "source" : "e84af637363fb2c4.json",
  "parameterValues" : [ ]
}